<?php


	$EDIT_TYPE                            = 'report';
	$TABLE_NAME[]                         = $EDIT_TYPE;
	$THIS_TABLE_IS_USERDATA[ $EDIT_TYPE ] = false;
	$THIS_TABLE_IS_NOHTML[ $EDIT_TYPE ]   = false;
	$LST[ $EDIT_TYPE ]                    = './lst/module/report.csv';
	$TDB[ $EDIT_TYPE ]                    = './tdb/module/report.csv';
	$ID_HEADER[ $EDIT_TYPE ]              = 'R';
	$ID_LENGTH[ $EDIT_TYPE ]              = 8;
	
	class ReportEx
	{
		function ReportEx()
		{
			$this->options[ 'adwaresNUser' ] = Array(
				'users' => Array(
					'nUser' ,
				) ,
				'exportName' => 'çLçêíPà ê¨â ÉåÉ|Å[Ég.csv' ,
				'headers' => Array(
					'No' ,
					'çLçêID' ,
					'çLçêñº' ,
					'çLçêÉAÉNÉZÉXêî' ,
					'ÉNÉäÉbÉNçLçêê¨â êî' ,
					'ÉNÉäÉbÉNçLçêê¨â äz' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â êî' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â äz' ,
					'åpë±çLçêê¨â êî' ,
					'åpë±çLçêê¨â äz' ,
					'çLçêê¨â ëçäz' ,
					'ÉeÉBÉAëçäz'
				) ,
				'targets' => Array(
					'adwares' => Array(
						'skipFilter' => 'nUser:adwares' ,
						'formats' => Array(
							'<!--# mod report serialNumber #-->' ,
							'<!--# value id #-->' ,
							'<!--# value name #-->' ,
							'<!--# code getRow access adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow click_pay adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum click_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow pay adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow continue_pay adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum continue_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# calc (!--# code getSum click_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum continue_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' ,
							'<!--# code getSum tier cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->'
						)
					) ,
					'secretAdwares' => Array(
						'skipFilter' => 'nUser:secretAdwares' ,
						'formats' => Array(
							'<!--# mod report serialNumber #-->' ,
							'<!--# value id #-->' ,
							'<!--# value name #-->' ,
							'<!--# code getRow access adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow click_pay adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum click_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow pay adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow continue_pay adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum continue_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# calc (!--# code getSum click_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum continue_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' ,
							'<!--# code getSum tier cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->'
						)
					)
				)
			);

			$this->options[ 'adwares' ] = Array(
				'users' => Array(
					'cUser' ,
					'admin'
				) ,
				'exportName' => 'çLçêíPà ê¨â ÉåÉ|Å[Ég.csv' ,
				'headers' => Array(
					'No' ,
					'çLçêID' ,
					'çLçêñº' ,
					'çLçêÉAÉNÉZÉXêî' ,
					'ÉNÉäÉbÉNçLçêê¨â êî' ,
					'ÉNÉäÉbÉNçLçêê¨â äz' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â êî' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â äz' ,
					'åpë±çLçêê¨â êî' ,
					'åpë±çLçêê¨â äz' ,
					'çLçêê¨â ëçäz' ,
					'ÉeÉBÉAëçäz'
				) ,
				'targets' => Array(
					'adwares' => Array(
						'ownerColumn' => Array(
							'cUser' => 'cuser'
						) ,
						'searchColumn' => Array(
							'cuser'
						) ,
						'formats' => Array(
							'<!--# mod report serialNumber #-->' ,
							'<!--# value id #-->' ,
							'<!--# value name #-->' ,
							'<!--# code getRow access adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow click_pay adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum click_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow pay adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow continue_pay adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum continue_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# calc (!--# code getSum click_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum continue_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' ,
							'<!--# code getSum tier cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->'
						)
					) ,
					'secretAdwares' => Array(
						'ownerColumn' => Array(
							'nUser' => 'open_user' ,
							'cUser' => 'cuser'
						) ,
						'searchColumn' => Array(
							'cuser'
						) ,
						'formats' => Array(
							'<!--# mod report serialNumber #-->' ,
							'<!--# value id #-->' ,
							'<!--# value name #-->' ,
							'<!--# code getRow access adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow click_pay adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum click_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow pay adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getRow continue_pay adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# code getSum continue_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# calc (!--# code getSum click_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum continue_pay cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' ,
							'<!--# code getSum tier cost adwares = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->'
						)
					)
				)
			);

			$this->options[ 'cUser' ] = Array(
				'users' => Array(
					'admin'
				) ,
				'exportName' => 'çLçêéÂíPà ê¨â ÉåÉ|Å[Ég.csv' ,
				'headers' => Array(
					'No' ,
					'ID' ,
					'ñºëO' ,
					'óXï÷î‘çÜ' ,
					'ìsìπï{åß' ,
					'èZèä' ,
					'ìdòbî‘çÜ' ,
					'ÉÅÅ[ÉãÉAÉhÉåÉX' ,
					'çLçêÉAÉNÉZÉXêî' ,
					'ÉNÉäÉbÉNçLçêê¨â êî' ,
					'ÉNÉäÉbÉNçLçêê¨â äz' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â êî' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â äz' ,
					'åpë±çLçêê¨â êî' ,
					'åpë±çLçêê¨â äz' ,
					'çLçêê¨â ëçäz' ,
					'ÉeÉBÉAëçäz',
				) ,
				'targets' => Array(
					'cUser' => Array(
						'formats' => Array(
							'<!--# mod report serialNumber #-->' ,
							'<!--# value id #-->' ,
							'<!--# value name #-->' ,
							'<!--# value zip1 #-->-<!--# value zip2 #-->' ,
							'<!--# alias prefectures adds id name #-->' ,
							'<!--# value add_sub #-->' ,
							'<!--# value tel #-->' ,
							'<!--# value mail #-->' ,
							'<!--# code getRow access cuser = (!--# value id #--) #-->' ,
							'<!--# code getRow click_pay cuser = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# regist thru-add pay (!--# code getSum click_pay cost cuser = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' ,
							'<!--# code getRow pay cuser = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# regist thru-add pay (!--# code getSum pay cost cuser = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' ,
							'<!--# code getRow continue_pay cuser = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #-->' ,
							'<!--# regist thru-add pay (!--# code getSum continue_pay cost cuser = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' ,
							'<!--# regist pop pay #-->' ,
							'<!--# regist thru-add pay (!--# code getSum tier cost cuser = (!--# value id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' 
						)
					)
				)
			);

			$this->options[ 'returnss' ] = Array(
				'users' => Array(
					'admin' ,
				) ,
				'exportName' => 'ä∑ã‡ê\êøóöóÉåÉ|Å[Ég.csv' ,
				'headers' => Array(
					'No' ,
					'ê\êøì˙éû' ,
					'ã‡äz' ,
					'èÛë‘' ,
					'ÉAÉtÉBÉäÉGÉCÉ^Å[ID' ,
					'ÉAÉtÉBÉäÉGÉCÉ^Å[ñº' ,
					'ã‡óZã@ä÷ñº' ,
					'ã‡óZã@ä÷î‘çÜ' ,
					'éxìXñº' ,
					'éxìXî‘çÜ' ,
					'éÌï ' ,
					'å˚ç¿î‘çÜ' ,
					'å˚ç¿ñºã`(ÉJÉi)' ,
				) ,
				'targets' => Array(
					'returnss' => Array(
						'searchSystem' => true ,
						'formats' => Array(
							'<!--# mod report serialNumber #-->' ,
							'<!--# value regist #-->' ,
							'<!--# value cost #-->' ,
							'<!--# value state #-->' ,
							'<!--# value owner #-->' ,
							'<!--# alias nUser owner id name #-->' ,
							'<!--# alias nUser owner id bank #-->' ,
							'<!--# alias nUser owner id bank_code #-->' ,
							'<!--# alias nUser owner id branch #-->' ,
							'<!--# alias nUser owner id branch_code #-->' ,
							'<!--# alias nUser owner id bank_type #-->' ,
							'<!--# alias nUser owner id number #-->' ,
							'<!--# alias nUser owner id bank_name #-->'
						)
					) ,
				)
			);
			
			$this->options[ 'use_fee' ] = Array(
				'users' => Array(
					'admin'
				) ,
				'exportName' => '<!--# code now format  Y_m_d_G_i #-->_êøãÅópê¨â èWåvÉåÉ|Å[Ég.csv' ,
				'headers' => Array(
					'No' ,
					'ID' ,
					'ñºëO' ,
					'óXï÷î‘çÜ' ,
					'ìsìπï{åß' ,
					'èZèä' ,
					'ìdòbî‘çÜ' ,
					'ÉÅÅ[ÉãÉAÉhÉåÉX' ,
					'çLçêÉAÉNÉZÉXêî' ,
					'ÉNÉäÉbÉNçLçêê¨â êî' ,
					'ÉNÉäÉbÉNçLçêê¨â äz' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â êî' ,
					'ÉAÉtÉBÉäÉGÉCÉgçLçêê¨â äz' ,
					'åpë±çLçêê¨â êî' ,
					'åpë±çLçêê¨â äz' ,
					'çLçêê¨â ëçäz' ,
					'ÉeÉBÉAëçäz' ,
					'ïÒèVçáåv'
				) ,
				'targets' => Array(
					'cUser' => Array(
						'formats' => Array(
							'<!--# mod report serialNumber #-->' ,
							'<!--# value id #-->' ,
							'<!--# value name #-->' ,
							'<!--# value zip1 #-->-<!--# value zip2 #-->' ,
							'<!--# alias prefectures adds id name #-->' ,
							'<!--# value add_sub #-->' ,
							'<!--# value tel #-->' ,
							'<!--# value mail #-->' ,
							'<!--# code getRow access cuser = (!--# value id #--) #-->' ,
							'<!--# code getRow click_pay report_id = (!--# mod report reportID #--) #-->' ,
							'<!--# regist thru-add pay (!--# code getSum click_pay cost report_id = (!--# mod report reportID #--) #--) #-->' ,
							'<!--# code getRow pay report_id = (!--# mod report reportID #--) #-->' ,
							'<!--# regist thru-add pay (!--# code getSum pay cost report_id = (!--# mod report reportID #--) #--) #-->' ,
							'<!--# code getRow continue_pay report_id = (!--# mod report reportID #--) #-->' ,
							'<!--# regist thru-add pay (!--# code getSum continue_pay cost report_id = (!--# mod report reportID #--) #--) #-->' ,
							'<!--# regist get pay #-->' ,
							'<!--# regist thru-add pay (!--# code getSum tier cost report_id = (!--# mod report reportID #--) #--) #-->' ,
							'<!--# regist pop pay #-->'
						)
					)
				) ,
				'before' => 'use_fee'
			);
		}

		/**
			@brief     ÉåÉ|Å[ÉgÇÃèoóÕñºÇéÊìæÇ∑ÇÈÅB
			@exception InvalidArgumentException $iCaseName_ Ç…ñ≥å¯Ç»ílÇéwíËÇµÇΩèÍçáÅB
			@param[in] $iCaseName_ ÉåÉ|Å[ÉgÉPÅ[ÉXñºÅB
			@return    ÉåÉ|Å[ÉgÉPÅ[ÉXÇ…ëŒâûÇ∑ÇÈèoóÕñºÅB
		*/
		function getExportName( $iCaseName_ )
		{
			if( !$iCaseName_ ) //ÉPÅ[ÉXñºÇ™ãÛÇÃèÍçá
				{ throw new InvalidArgumentException( 'à¯êî $iCaseName_ ÇÕñ≥å¯Ç≈Ç∑' ); }

			if( !array_key_exists( $iCaseName_ , $this->options ) ) //ÉåÉ|Å[ÉgÉPÅ[ÉXÇ™ê›íËÇ≥ÇÍÇƒÇ¢Ç»Ç¢èÍçá
				{ throw new InvalidArgumentException( 'à¯êî $iCaseName_ ÇÕñ≥å¯Ç≈Ç∑[' . $iCaseName_ . ']' ); }

			return $this->options[ $iCaseName_ ][ 'exportName' ];
		}

		/**
			@brief     ÉåÉ|Å[ÉgÇÉ_ÉEÉìÉçÅ[ÉhópÇ…èoóÕÇ∑ÇÈÅB
			@exception InvalidArgumentException $iCaseName_ Ç…ñ≥å¯Ç»ílÇéwíËÇµÇΩèÍçáÅB
			@param[in] $iCaseName_ ÉåÉ|Å[ÉgÉPÅ[ÉXñºÅB
			@param[in] $iCaseName_ É_ÉEÉìÉçÅ[ÉhÉtÉ@ÉCÉãñºÅBè»ó™â¬ÅB
		*/
		function downloadReport( $iCaseName_ , $iExportName_ = null )
		{
			global $loginUserType;
			global $LOGIN_ID;

			if( !$iCaseName_ ) //ÉPÅ[ÉXñºÇ™ãÛÇÃèÍçá
				{ throw new InvalidArgumentException( 'à¯êî $iCaseName_ ÇÕñ≥å¯Ç≈Ç∑' ); }

			if( !array_key_exists( $iCaseName_ , $this->options ) ) //ÉåÉ|Å[ÉgÉPÅ[ÉXÇ™ê›íËÇ≥ÇÍÇƒÇ¢Ç»Ç¢èÍçá
				{ throw new InvalidArgumentException( 'à¯êî $iCaseName_ ÇÕñ≥å¯Ç≈Ç∑[' . $iCaseName_ . ']' ); }

			if( $iExportName_ ) //É_ÉEÉìÉçÅ[ÉhñºÇ™éwíËÇ≥ÇÍÇƒÇ¢ÇÈèÍçá
				{ $exportName = $iExportName_; }
			else //É_ÉEÉìÉçÅ[ÉhñºÇ™éwíËÇ≥ÇÍÇƒÇ¢Ç»Ç¢èÍçá 
				{ $exportName = $this->getExportName( $iCaseName_ ); }
				
				
			$gm     = GMList::GetGM( 'report' );
			$exportName = $gm->getCCResult( null , $exportName );

			$option = $this->options[ $iCaseName_ ];

			if( FALSE === array_search( $loginUserType , $option[ 'users' ] ) ) //ÉåÉ|Å[ÉgéÊìæå†å¿Ç™Ç»Ç¢èÍçá
				{ throw new RuntimeException( 'downloadReport ÇäÆóπÇ≈Ç´Ç‹ÇπÇÒ[' . $loginUserType . '][' . $LOGIN_ID . ']' ); }

			$searchResult = $this->getReportResult( $option );
			$stdout       = fopen( 'php://output' , 'w' );

			$this->sendDownloadHeader( $exportName );

			fputs( $stdout , 'ê∂ê¨ì˙ÅF' . date( 'Y n/j' ) . "\n" );
			fputs( $stdout , implode( ',' , $option[ 'headers' ] ) . "\n" );
		
			
			if( isset( $option['before']))	//ëOèàóùÇÃé¿çs
			{
				$method = "before_".$option['before'];
				$class_name = 'mod_report';
				
				$sys = new $class_name();
				$sys->$method( $searchResult, $option );
			}

			while( $line = $this->popLine( $searchResult , $option ) ) //åãâ Çì«Ç›çûÇﬂÇÈä‘åJÇËï‘Çµ
				{ fputs( $stdout , $line . "\n" ); }
			
		
			if( isset( $option['after']))	//ëOèàóùÇÃé¿çs
			{
				$method = "after_".$option['after'];
				$class_name = 'mod_report';
				
				$sys = new $class_name();
				$sys->$method( $searchResult, $option );
			}

			fputs( $stdout , "\n" );
			fclose( $stdout );
		}

		/**
			@brief     ÉåÉ|Å[ÉgÉIÉvÉVÉáÉìÇå≥Ç…ÉåÉ|Å[ÉgÉfÅ[É^ÇåüçıÇ∑ÇÈÅB
			@exception InvalidArgumentException $iOption_ Ç…ñ≥å¯Ç»ílÇéwíËÇµÇΩèÍçáÅB
			@param[in] $iOption_ ÉåÉ|Å[ÉgÉIÉvÉVÉáÉìÅB
			@return    åüçıåãâ ÉfÅ[É^ÅB
		*/
		private function getReportResult( $iOption_ )
		{
			global $gm;
			global $loginUserType;
			global $loginUserRank;
			global $LOGIN_ID;

			if( !is_array( $iOption_ ) ) //ÉIÉvÉVÉáÉìÇ™îzóÒÇ≈ÇÕÇ»Ç¢èÍçá
				{ throw new InvalidArgumentException( 'à¯êî $iOption_ ÇÕñ≥å¯Ç≈Ç∑[' . $iOption_ . ']' ); }

			$results = Array();
			$targets = $iOption_[ 'targets' ];

			if( !is_array( $targets ) ) //É^Å[ÉQÉbÉgÉeÅ[ÉuÉãÇ™îzóÒÇ≈ÇÕÇ»Ç¢èÍçá
				{ $targets = Array( $targets ); }

			foreach( $targets as $target => $config ) //ëSÇƒÇÃÉ^Å[ÉQÉbÉgÉeÅ[ÉuÉãÇèàóùÅB
			{
				$db    = GMList::getDB( $target );
				$table = $db->getTable();

				if( isset( $config[ 'searchSystem' ] ) ) //ÉVÉXÉeÉÄåüçıÇ™ê›íËÇ≥ÇÍÇƒÇ¢ÇÈèÍçá
				{
					$search = new Search( $gm[ $target ] , $target );
					$system = SystemUtil::getSystem( $target );

					if( $magic_quotes_gpc )
						{ $search->setParamertorSet( $_GET ); }
					else
						{ $search->setParamertorSet( addslashes_deep( $_GET ) ); }

					$system->searchResultProc( $gm , $search , $loginUserType , $loginUserRank );

					$table = $search->getResult();

					$system->searchProc( $gm , $table , $loginUserType , $loginUserRank );
				}

				if( isset( $config[ 'ownerColumn' ][ $loginUserType ] ) ) //ÉIÅ[ÉiÅ[èåèÇ™ê›íËÇ≥ÇÍÇƒÇ¢ÇÈèÍçá
					{ $table = $db->searchTable( $table , $config[ 'ownerColumn' ][ $loginUserType ] , '=' , '%' . $LOGIN_ID . '%' ); }

				if( isset( $config[ 'searchColumn' ] ) ) //åüçıèåèÇ™ê›íËÇ≥ÇÍÇƒÇ¢ÇÈèÍçá
				{
					if( !is_array( $config[ 'searchColumn' ] ) ) //îzóÒÇ≈ÇÕÇ»Ç¢èÍçá
						{ $searchs = Array( $config[ 'searchColumn' ] ); }
					else //îzóÒÇÃèÍçá
						{ $searchs = $config[ 'searchColumn' ]; }

					foreach( $searchs as $search ) //ëSÇƒÇÃåüçıèåèÇèàóù
					{
						if( $_POST[ $search ] ) //åüçıèåèÇ™ëóêMÇ≥ÇÍÇƒÇ¢ÇÈèÍçá
							{ $table = $db->searchTable( $table , $search , '=' , $_POST[ $search ] ); }
					}
				}

				$row = $db->getRow( $table );

				$results[ 'tables' ][] = Array( $target , $table , $row );
			}

			$results[ 'cursor' ] = Array( 0 , 0 );

			return $results;
		}

		/**
			@brief         åüçıåãâ ÉfÅ[É^Ç©ÇÁéüÇÃèoóÕçsÇÃì‡óeÇéÊìæÇ∑ÇÈÅB
			@exception     InvalidArgumentException $iResult_ , $iOption_ ÇÃÇ¢Ç∏ÇÍÇ©Ç…ñ≥å¯Ç»ílÇéwíËÇµÇΩèÍçáÅB
			@param[in,out] $iResult_ åüçıåãâ ÉfÅ[É^ÅB
			@param[in]     $iOption_ ÉåÉ|Å[ÉgÉIÉvÉVÉáÉìÅB
			@retval        èoóÕì‡óe  éüÇÃçsÇ™éÊìæâ¬î\Ç»èÍçáÅB
			@retval        null      éüÇÃçsÇ™éÊìæÇ≈Ç´Ç»Ç¢èÍçáÅB
		*/
		private function popLine( &$ioResult_ , $iOption_ )
		{
			List( $currentTable , $currentRow ) = $ioResult_[ 'cursor' ];
			List( $name , $table , $row )       = $ioResult_[ 'tables' ][ $currentTable ];

			while( $row <= $currentRow ) //ÉeÅ[ÉuÉãÇÃçsîÕàÕÇí¥Ç¶ÇÈä‘åJÇËï‘Çµ
			{
				$currentTable += 1;
				$currentRow    = 0;

				if( count( $ioResult_[ 'tables' ] ) <= $currentTable ) //ÉeÅ[ÉuÉãÉäÉXÉgÇÃîÕàÕÇí¥Ç¶ÇƒÇ¢ÇÈèÍçá
					{ return null; }

				List( $name , $table , $row ) = $ioResult_[ 'tables' ][ $currentTable ];
			}

			$db          = GMList::GetDB( $name );
			$rec         = $db->getRecord( $table , $currentRow );
			$currentRow += 1;

			$ioResult_[ 'cursor' ] = Array( $currentTable , $currentRow );

			if( $this->isSkip( $name , $rec , $iOption_ ) ) //ÉXÉLÉbÉvèåèÇ…àÍívÇ∑ÇÈèÍçá
				{ return $this->popLine( $ioResult_ , $iOption_ ); }

			return $this->createLineString( $name , $rec , $iOption_ );
		}

		private function isSkip( $iTableName_ , $iRec_ , $iOption_ )
		{
			if( !$iOption_[ 'targets' ][ $iTableName_ ][ 'skipFilter' ] ) //ÉtÉBÉãÉ^Ç™ê›íËÇ≥ÇÍÇƒÇ¢Ç»Ç¢èÍçá
				{ return false; }

			switch( $iOption_[ 'targets' ][ $iTableName_ ][ 'skipFilter' ] ) //ÉtÉBÉãÉ^ñºÇ≈ï™äÚ
			{
				case 'nUser:adwares'       : //nUserÇ©ÇÁÇÃçLçêÉåÉ|Å[Ég
				case 'nUser:secretAdwares' : //nUserÇ©ÇÁÇÃÉNÉçÅ[ÉYÉhçLçêÉåÉ|Å[Ég
				{
					$gm     = GMList::GetGM( $iTableName_ );
					$result = $gm->getCCResult( $iRec_ , '<!--# calc (!--# code getSum click_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) + (!--# code getSum continue_pay cost adwares = (!--# value id #--) owner = (!--# ecode self id #--) regist b (!--# mod report beginTime #--) (!--# mod report endTime #--) #--) #-->' );

					if( !$result ) //ê¨â äzÇ™ãÛÇÃèÍçá
						{ return true; }

					break;
				}

				default : //ÇªÇÃëº
					{ throw new InvalidArgumentException( 'à¯êî $iOption_ ÇÕñ≥å¯Ç≈Ç∑[' . $iOption_[ 'targets' ][ $iTableName_ ][ 'skipFilter' ] . ']' ); }
			}

			return false;
		}

		private function createLineString( $iTableName_ , $iRec_ , $iOption_ )
		{
			$gm      = GMList::GetGM( $iTableName_ );
			$formats = $iOption_[ 'targets' ][ $iTableName_ ][ 'formats' ];
			$line    = Array();

			foreach( $formats as $format ) //ëSÇƒÇÃèoóÕçÄñ⁄Çèàóù
				{ $line[] = $gm->getCCResult( $iRec_ , $format ); }

			return implode( ',' , $line );
		}

		/**
			@brief     É_ÉEÉìÉçÅ[ÉhópÇ…HTTPÉwÉbÉ_ÇèoóÕÇ∑ÇÈÅB
			@param[in] $iExportName_ É_ÉEÉìÉçÅ[ÉhÉtÉ@ÉCÉãñºÅB
		*/
		private function sendDownloadHeader( $iExportName_ )
		{
			if( !$iExportName_ ) //É_ÉEÉìÉçÅ[ÉhñºÇ™ãÛÇÃèÍçá
				{ throw new InvalidArgumentException( 'à¯êî $iExportName_ ÇÕñ≥å¯Ç≈Ç∑' ); }
				
			header( 'Cache-Control: public' );
			header( 'Pragma:' );
	        header( 'Content-Disposition: attachment; filename="' . $iExportName_ . '"' );
			header( 'Content-type: application/x-octet-stream; name="' . $iExportName_ . '"; charset=Shift_JIS' );
		}

		private $option = Array();
	}

	class mod_report extends command_base
	{
		function serialNumber( &$iGM_ , $iRec_ , $iArgs_ )
		{
			self::$SerialNumber += 1;

			$this->addBuffer( self::$SerialNumber );
		}

		function beginTime( &$iGM_ , $iRec_ , $iArgs_ )
		{
			if( $_POST[ 'registA' ] )
				{ $time = $_POST[ 'registA' ]; }
			else
			{
				$year  = ( $_POST[ 'yearA' ]  ? (int)$_POST[ 'yearA' ]  : 1970 );
				$month = ( $_POST[ 'monthA' ] ? (int)$_POST[ 'monthA' ] : 1 );
				$day   = ( $_POST[ 'dayA' ]   ? (int)$_POST[ 'dayA' ]   : 1 );

				$time = mktime( 0 , 0 , 0 , $month , $day , $year );
			}

			if( 0 > $time )
				{ $time = 0; }

			$this->addBuffer( $time );
		}

		function endTime( &$iGM_ , $iRec_ , $iArgs_ )
		{
			if( $_POST[ 'registB' ] )
				{ $time = $_POST[ 'registB' ]; }
			else
			{
				if( !$_POST[ 'yearA' ] && !$_POST[ 'monthA' ] && !$_POST[ 'dayA' ] )
					{ $time = mktime( 0 , 0 , 0 , date( 'n' ) , date( 'j' ) + 1 , date( 'Y' ) ); }
				else
				{
					$year  = ( $_POST[ 'yearB' ]  ? (int)$_POST[ 'yearB' ]  : 2038 );
					$month = ( $_POST[ 'monthB' ] ? (int)$_POST[ 'monthB' ] : 1 );
					$day   = ( $_POST[ 'dayB' ]   ? (int)$_POST[ 'dayB' ]   : 19 );

					$time = mktime( 0 , 0 , 0 , $month , $day + 1 , $year );
				}
			}

			$this->addBuffer( $time );
		}
		
		function before_use_fee( &$ioResult_ , $iOption_ )
		{
			$db      = GMList::getDB( 'report' );
			
			//åvéZëŒè€ÇÃåéÇéwíËÇ∑ÇÈÅB
			if( isset($_POST[ 'regist' ]) && $_POST[ 'regist' ] )
			{
				//åvéZçœÇ›Ç©Ç«Ç§Ç©ÇämîFÇ∑ÇÈ
				$table = $db->searchTable( $db->getTable(), 'regist', '=', $_POST[ 'regist' ]);
				
				if( $rec = $db->getFirstRecord($table) ){
					//åvéZçœÇ›Ç≈Ç†Ç¡ÇΩèÍçáÇÕÇªÇÃIDÇvariableÇ…ÉZÉbÉgÇ∑ÇÈ
					self::$ReportID = $db->getData( $rec, 'id');
					return;
				}
			}
			
			$time = mktime(0, 0, 0, date( 'n'  ) , 1, date( 'Y' ));
			
			$table = $db->searchTable( $db->getTable(), 'type', '=', 'use_fee');
			$table = $db->searchTable( $table, 'regist', '>=', $time);
			
			if( $rec = $db->getFirstRecord($table) ){
				//åvéZçœÇ›Ç≈Ç†Ç¡ÇΩèÍçáÇÕÇªÇÃIDÇvariableÇ…ÉZÉbÉgÇ∑ÇÈ
				$id = $db->getData( $rec, 'id');
			}else{
				//åvéZçœÇ›Ç≈Ç»Ç©Ç¡ÇΩèÍçáÇÕÅAreportÉeÅ[ÉuÉãÇÃÉJÉâÉÄÇí«â¡ÇµÅAÇªÇÃIDÇvariableÇ…ÉZÉbÉgÇ∑ÇÈ
				$rec = $db->getNewRecord( Array( 'type'=> 'use_fee','regist'=>time()) );
				$id = SystemUtil::getNewId( $db,'report');
				$db->setData(  $rec, 'id', $id );
				$db->addRecord($rec);
				
				//åvéZëŒè€Ç…Ç»ÇÈÉåÉRÅ[ÉhÇÃÉJÉâÉÄÇ…IDÇÉZÉbÉgÇµÇƒÇ¢Ç≠ÅB
				$pay_tables = array( 'pay', 'continue_pay', 'click_pay', 'tier');
				
				foreach( $pay_tables as $pay_table )
				{
					$pdb = GMList::getDB( $pay_table );
					$ptable = $pdb->getTable();
					$ptable= $pdb->searchTable( $ptable, 'report_id', '=', '');
					if( $pay_table != "tier"){
						$ptable= $pdb->searchTable( $ptable, 'state', '=', 2);
					}
					$ptable= $pdb->searchTable( $ptable, 'regist', '<', $time);
					
					$pdb->setTableDataUpdate($ptable,'report_id',$id);
				}
			}
			
			self::$ReportID = $id;
		}
		function reportID( &$iGM_ , $iRec_ , $iArgs_ )
		{
			$this->addBuffer( self::$ReportID );
		}
	
		/**
		 * reportÉeÅ[ÉuÉãÇÃtypeèåèÇ…çáÇ§ï®Ç©ÇÁì˙ïtÉxÅ[ÉXÇ≈ëIëÇ∑ÇÈselectBoxÇÃï\é¶
		 *
		 * @param gm GUIManagerÉIÉuÉWÉFÉNÉgÇ≈Ç∑ÅB
		 * @param rec ìoò^èÓïÒÇÃÉåÉRÅ[ÉhÉfÅ[É^Ç≈Ç∑ÅB
		 * @param args ÉRÉ}ÉìÉhÉRÉÅÉìÉgà¯êîîzóÒÇ≈Ç∑ÅB
		 *
         * ëÊàÍà¯êîÅFtype
         * ëÊìÒà¯êîÅFtime format
         * ëÊéOà¯êîÅFñ¢ëIëçÄñ⁄íl(è»ó™â¬)
		 */
        function reportSelectForm( &$gm , $rec , $args ){
            if(isset($args[0]) && strlen($args[0]))
                $type = $args[0];
            else
                $type = "";
                
            if(isset($args[1]) && strlen($args[1]))
                $format = $args[1];
            else
                $format = "Y-m-d G:i:s";
            
            $tgm = SystemUtil::getGMforType( 'report' );
            $db = $tgm->getDB();
            
            $table = $db->getTable();
            $table = $db->searchTable( $table, 'type', '=', $type );
            
            $row = $db->getRow( $table );
            
            if(!$row){ $this->addBuffer( $args[2] ); return; }
            
            $index = Array();
            $value  = Array();
        
            if( isset($args[2]) && strlen($args[2]) ){
                $index[] = SystemUtil::systemArrayEscape( $args[2] );
                $value[] = "";
            }
            
            for($i=0;$i<$row;$i++){
                $rec = $db->getRecord( $table , $i );
                $regist = $db->getData( $rec , 'regist' );
                $index[] = SystemUtil::systemArrayEscape( SystemUtil::mb_date( $format, $regist)  );
                $value[] = $regist;
            }
            
            $index = join('/',$index);
            $value = join('/',$value);
            
            $this->addBuffer( $gm->getCCResult( $rec, '<!--# form option regist '.$check.' '.$value.' '.$index.$option.' #-->' ) );
        }
		
		private static $ReportID = '';
		private static $SerialNumber = 0;
	}
